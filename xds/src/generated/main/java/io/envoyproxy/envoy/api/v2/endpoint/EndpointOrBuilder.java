// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/endpoint/endpoint.proto

package io.envoyproxy.envoy.api.v2.endpoint;

public interface EndpointOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.api.v2.endpoint.Endpoint)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The upstream host address.
   * .. attention::
   *   The form of host address depends on the given cluster type. For STATIC or EDS,
   *   it is expected to be a direct IP address (or something resolvable by the
   *   specified :ref:`resolver &lt;envoy_api_field_core.SocketAddress.resolver_name&gt;`
   *   in the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,
   *   and will be resolved via DNS.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Address address = 1;</code>
   */
  boolean hasAddress();
  /**
   * <pre>
   * The upstream host address.
   * .. attention::
   *   The form of host address depends on the given cluster type. For STATIC or EDS,
   *   it is expected to be a direct IP address (or something resolvable by the
   *   specified :ref:`resolver &lt;envoy_api_field_core.SocketAddress.resolver_name&gt;`
   *   in the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,
   *   and will be resolved via DNS.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Address address = 1;</code>
   */
  io.envoyproxy.envoy.api.v2.core.Address getAddress();
  /**
   * <pre>
   * The upstream host address.
   * .. attention::
   *   The form of host address depends on the given cluster type. For STATIC or EDS,
   *   it is expected to be a direct IP address (or something resolvable by the
   *   specified :ref:`resolver &lt;envoy_api_field_core.SocketAddress.resolver_name&gt;`
   *   in the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,
   *   and will be resolved via DNS.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Address address = 1;</code>
   */
  io.envoyproxy.envoy.api.v2.core.AddressOrBuilder getAddressOrBuilder();

  /**
   * <pre>
   * The optional health check configuration is used as configuration for the
   * health checker to contact the health checked host.
   * .. attention::
   *   This takes into effect only for upstream clusters with
   *   :ref:`active health checking &lt;arch_overview_health_checking&gt;` enabled.
   * </pre>
   *
   * <code>.envoy.api.v2.endpoint.Endpoint.HealthCheckConfig health_check_config = 2;</code>
   */
  boolean hasHealthCheckConfig();
  /**
   * <pre>
   * The optional health check configuration is used as configuration for the
   * health checker to contact the health checked host.
   * .. attention::
   *   This takes into effect only for upstream clusters with
   *   :ref:`active health checking &lt;arch_overview_health_checking&gt;` enabled.
   * </pre>
   *
   * <code>.envoy.api.v2.endpoint.Endpoint.HealthCheckConfig health_check_config = 2;</code>
   */
  io.envoyproxy.envoy.api.v2.endpoint.Endpoint.HealthCheckConfig getHealthCheckConfig();
  /**
   * <pre>
   * The optional health check configuration is used as configuration for the
   * health checker to contact the health checked host.
   * .. attention::
   *   This takes into effect only for upstream clusters with
   *   :ref:`active health checking &lt;arch_overview_health_checking&gt;` enabled.
   * </pre>
   *
   * <code>.envoy.api.v2.endpoint.Endpoint.HealthCheckConfig health_check_config = 2;</code>
   */
  io.envoyproxy.envoy.api.v2.endpoint.Endpoint.HealthCheckConfigOrBuilder getHealthCheckConfigOrBuilder();
}
