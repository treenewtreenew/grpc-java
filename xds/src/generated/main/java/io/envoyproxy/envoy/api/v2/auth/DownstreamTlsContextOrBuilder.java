// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/auth/cert.proto

package io.envoyproxy.envoy.api.v2.auth;

public interface DownstreamTlsContextOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.api.v2.auth.DownstreamTlsContext)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Common TLS context settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
   */
  boolean hasCommonTlsContext();
  /**
   * <pre>
   * Common TLS context settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
   */
  io.envoyproxy.envoy.api.v2.auth.CommonTlsContext getCommonTlsContext();
  /**
   * <pre>
   * Common TLS context settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
   */
  io.envoyproxy.envoy.api.v2.auth.CommonTlsContextOrBuilder getCommonTlsContextOrBuilder();

  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid client
   * certificate.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
   */
  boolean hasRequireClientCertificate();
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid client
   * certificate.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
   */
  com.google.protobuf.BoolValue getRequireClientCertificate();
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid client
   * certificate.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getRequireClientCertificateOrBuilder();

  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid and matching SNI.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_sni = 3;</code>
   */
  boolean hasRequireSni();
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid and matching SNI.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_sni = 3;</code>
   */
  com.google.protobuf.BoolValue getRequireSni();
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid and matching SNI.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_sni = 3;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getRequireSniOrBuilder();

  /**
   * <pre>
   * TLS session ticket key settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
   */
  boolean hasSessionTicketKeys();
  /**
   * <pre>
   * TLS session ticket key settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
   */
  io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys getSessionTicketKeys();
  /**
   * <pre>
   * TLS session ticket key settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
   */
  io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeysOrBuilder getSessionTicketKeysOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
   */
  boolean hasSessionTicketKeysSdsSecretConfig();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
   */
  io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getSessionTicketKeysSdsSecretConfig();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
   */
  io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getSessionTicketKeysSdsSecretConfigOrBuilder();

  public io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.SessionTicketKeysTypeCase getSessionTicketKeysTypeCase();
}
