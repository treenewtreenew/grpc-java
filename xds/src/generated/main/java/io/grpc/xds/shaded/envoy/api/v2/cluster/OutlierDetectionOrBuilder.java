// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/cluster/outlier_detection.proto

package io.grpc.xds.shaded.envoy.api.v2.cluster;

public interface OutlierDetectionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.api.v2.cluster.OutlierDetection)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The number of consecutive 5xx responses before a consecutive 5xx ejection
   * occurs. Defaults to 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value consecutive_5xx = 1;</code>
   */
  boolean hasConsecutive5Xx();
  /**
   * <pre>
   * The number of consecutive 5xx responses before a consecutive 5xx ejection
   * occurs. Defaults to 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value consecutive_5xx = 1;</code>
   */
  com.google.protobuf.UInt32Value getConsecutive5Xx();
  /**
   * <pre>
   * The number of consecutive 5xx responses before a consecutive 5xx ejection
   * occurs. Defaults to 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value consecutive_5xx = 1;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getConsecutive5XxOrBuilder();

  /**
   * <pre>
   * The time interval between ejection analysis sweeps. This can result in
   * both new ejections as well as hosts being returned to service. Defaults
   * to 10000ms or 10s.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 2 [(.validate.rules) = { ... }</code>
   */
  boolean hasInterval();
  /**
   * <pre>
   * The time interval between ejection analysis sweeps. This can result in
   * both new ejections as well as hosts being returned to service. Defaults
   * to 10000ms or 10s.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.Duration getInterval();
  /**
   * <pre>
   * The time interval between ejection analysis sweeps. This can result in
   * both new ejections as well as hosts being returned to service. Defaults
   * to 10000ms or 10s.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getIntervalOrBuilder();

  /**
   * <pre>
   * The base time that a host is ejected for. The real time is equal to the
   * base time multiplied by the number of times the host has been ejected.
   * Defaults to 30000ms or 30s.
   * </pre>
   *
   * <code>.google.protobuf.Duration base_ejection_time = 3 [(.validate.rules) = { ... }</code>
   */
  boolean hasBaseEjectionTime();
  /**
   * <pre>
   * The base time that a host is ejected for. The real time is equal to the
   * base time multiplied by the number of times the host has been ejected.
   * Defaults to 30000ms or 30s.
   * </pre>
   *
   * <code>.google.protobuf.Duration base_ejection_time = 3 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.Duration getBaseEjectionTime();
  /**
   * <pre>
   * The base time that a host is ejected for. The real time is equal to the
   * base time multiplied by the number of times the host has been ejected.
   * Defaults to 30000ms or 30s.
   * </pre>
   *
   * <code>.google.protobuf.Duration base_ejection_time = 3 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getBaseEjectionTimeOrBuilder();

  /**
   * <pre>
   * The maximum % of an upstream cluster that can be ejected due to outlier
   * detection. Defaults to 10% but will eject at least one host regardless of the value.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_ejection_percent = 4 [(.validate.rules) = { ... }</code>
   */
  boolean hasMaxEjectionPercent();
  /**
   * <pre>
   * The maximum % of an upstream cluster that can be ejected due to outlier
   * detection. Defaults to 10% but will eject at least one host regardless of the value.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_ejection_percent = 4 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32Value getMaxEjectionPercent();
  /**
   * <pre>
   * The maximum % of an upstream cluster that can be ejected due to outlier
   * detection. Defaults to 10% but will eject at least one host regardless of the value.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_ejection_percent = 4 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxEjectionPercentOrBuilder();

  /**
   * <pre>
   * The % chance that a host will be actually ejected when an outlier status
   * is detected through consecutive 5xx. This setting can be used to disable
   * ejection or to ramp it up slowly. Defaults to 100.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value enforcing_consecutive_5xx = 5 [(.validate.rules) = { ... }</code>
   */
  boolean hasEnforcingConsecutive5Xx();
  /**
   * <pre>
   * The % chance that a host will be actually ejected when an outlier status
   * is detected through consecutive 5xx. This setting can be used to disable
   * ejection or to ramp it up slowly. Defaults to 100.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value enforcing_consecutive_5xx = 5 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32Value getEnforcingConsecutive5Xx();
  /**
   * <pre>
   * The % chance that a host will be actually ejected when an outlier status
   * is detected through consecutive 5xx. This setting can be used to disable
   * ejection or to ramp it up slowly. Defaults to 100.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value enforcing_consecutive_5xx = 5 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getEnforcingConsecutive5XxOrBuilder();

  /**
   * <pre>
   * The % chance that a host will be actually ejected when an outlier status
   * is detected through success rate statistics. This setting can be used to
   * disable ejection or to ramp it up slowly. Defaults to 100.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value enforcing_success_rate = 6 [(.validate.rules) = { ... }</code>
   */
  boolean hasEnforcingSuccessRate();
  /**
   * <pre>
   * The % chance that a host will be actually ejected when an outlier status
   * is detected through success rate statistics. This setting can be used to
   * disable ejection or to ramp it up slowly. Defaults to 100.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value enforcing_success_rate = 6 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32Value getEnforcingSuccessRate();
  /**
   * <pre>
   * The % chance that a host will be actually ejected when an outlier status
   * is detected through success rate statistics. This setting can be used to
   * disable ejection or to ramp it up slowly. Defaults to 100.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value enforcing_success_rate = 6 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getEnforcingSuccessRateOrBuilder();

  /**
   * <pre>
   * The number of hosts in a cluster that must have enough request volume to
   * detect success rate outliers. If the number of hosts is less than this
   * setting, outlier detection via success rate statistics is not performed
   * for any host in the cluster. Defaults to 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value success_rate_minimum_hosts = 7;</code>
   */
  boolean hasSuccessRateMinimumHosts();
  /**
   * <pre>
   * The number of hosts in a cluster that must have enough request volume to
   * detect success rate outliers. If the number of hosts is less than this
   * setting, outlier detection via success rate statistics is not performed
   * for any host in the cluster. Defaults to 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value success_rate_minimum_hosts = 7;</code>
   */
  com.google.protobuf.UInt32Value getSuccessRateMinimumHosts();
  /**
   * <pre>
   * The number of hosts in a cluster that must have enough request volume to
   * detect success rate outliers. If the number of hosts is less than this
   * setting, outlier detection via success rate statistics is not performed
   * for any host in the cluster. Defaults to 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value success_rate_minimum_hosts = 7;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getSuccessRateMinimumHostsOrBuilder();

  /**
   * <pre>
   * The minimum number of total requests that must be collected in one
   * interval (as defined by the interval duration above) to include this host
   * in success rate based outlier detection. If the volume is lower than this
   * setting, outlier detection via success rate statistics is not performed
   * for that host. Defaults to 100.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value success_rate_request_volume = 8;</code>
   */
  boolean hasSuccessRateRequestVolume();
  /**
   * <pre>
   * The minimum number of total requests that must be collected in one
   * interval (as defined by the interval duration above) to include this host
   * in success rate based outlier detection. If the volume is lower than this
   * setting, outlier detection via success rate statistics is not performed
   * for that host. Defaults to 100.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value success_rate_request_volume = 8;</code>
   */
  com.google.protobuf.UInt32Value getSuccessRateRequestVolume();
  /**
   * <pre>
   * The minimum number of total requests that must be collected in one
   * interval (as defined by the interval duration above) to include this host
   * in success rate based outlier detection. If the volume is lower than this
   * setting, outlier detection via success rate statistics is not performed
   * for that host. Defaults to 100.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value success_rate_request_volume = 8;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getSuccessRateRequestVolumeOrBuilder();

  /**
   * <pre>
   * This factor is used to determine the ejection threshold for success rate
   * outlier ejection. The ejection threshold is the difference between the
   * mean success rate, and the product of this factor and the standard
   * deviation of the mean success rate: mean - (stdev *
   * success_rate_stdev_factor). This factor is divided by a thousand to get a
   * double. That is, if the desired factor is 1.9, the runtime value should
   * be 1900. Defaults to 1900.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value success_rate_stdev_factor = 9;</code>
   */
  boolean hasSuccessRateStdevFactor();
  /**
   * <pre>
   * This factor is used to determine the ejection threshold for success rate
   * outlier ejection. The ejection threshold is the difference between the
   * mean success rate, and the product of this factor and the standard
   * deviation of the mean success rate: mean - (stdev *
   * success_rate_stdev_factor). This factor is divided by a thousand to get a
   * double. That is, if the desired factor is 1.9, the runtime value should
   * be 1900. Defaults to 1900.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value success_rate_stdev_factor = 9;</code>
   */
  com.google.protobuf.UInt32Value getSuccessRateStdevFactor();
  /**
   * <pre>
   * This factor is used to determine the ejection threshold for success rate
   * outlier ejection. The ejection threshold is the difference between the
   * mean success rate, and the product of this factor and the standard
   * deviation of the mean success rate: mean - (stdev *
   * success_rate_stdev_factor). This factor is divided by a thousand to get a
   * double. That is, if the desired factor is 1.9, the runtime value should
   * be 1900. Defaults to 1900.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value success_rate_stdev_factor = 9;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getSuccessRateStdevFactorOrBuilder();

  /**
   * <pre>
   * The number of consecutive gateway failures (502, 503, 504 status or
   * connection errors that are mapped to one of those status codes) before a
   * consecutive gateway failure ejection occurs. Defaults to 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value consecutive_gateway_failure = 10;</code>
   */
  boolean hasConsecutiveGatewayFailure();
  /**
   * <pre>
   * The number of consecutive gateway failures (502, 503, 504 status or
   * connection errors that are mapped to one of those status codes) before a
   * consecutive gateway failure ejection occurs. Defaults to 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value consecutive_gateway_failure = 10;</code>
   */
  com.google.protobuf.UInt32Value getConsecutiveGatewayFailure();
  /**
   * <pre>
   * The number of consecutive gateway failures (502, 503, 504 status or
   * connection errors that are mapped to one of those status codes) before a
   * consecutive gateway failure ejection occurs. Defaults to 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value consecutive_gateway_failure = 10;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getConsecutiveGatewayFailureOrBuilder();

  /**
   * <pre>
   * The % chance that a host will be actually ejected when an outlier status
   * is detected through consecutive gateway failures. This setting can be
   * used to disable ejection or to ramp it up slowly. Defaults to 0.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value enforcing_consecutive_gateway_failure = 11 [(.validate.rules) = { ... }</code>
   */
  boolean hasEnforcingConsecutiveGatewayFailure();
  /**
   * <pre>
   * The % chance that a host will be actually ejected when an outlier status
   * is detected through consecutive gateway failures. This setting can be
   * used to disable ejection or to ramp it up slowly. Defaults to 0.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value enforcing_consecutive_gateway_failure = 11 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32Value getEnforcingConsecutiveGatewayFailure();
  /**
   * <pre>
   * The % chance that a host will be actually ejected when an outlier status
   * is detected through consecutive gateway failures. This setting can be
   * used to disable ejection or to ramp it up slowly. Defaults to 0.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value enforcing_consecutive_gateway_failure = 11 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getEnforcingConsecutiveGatewayFailureOrBuilder();
}
