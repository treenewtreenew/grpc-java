// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/auth/cert.proto

package io.grpc.xds.shaded.envoy.api.v2.auth;

public interface UpstreamTlsContextOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.api.v2.auth.UpstreamTlsContext)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Common TLS context settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
   */
  boolean hasCommonTlsContext();
  /**
   * <pre>
   * Common TLS context settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.auth.CommonTlsContext getCommonTlsContext();
  /**
   * <pre>
   * Common TLS context settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.auth.CommonTlsContextOrBuilder getCommonTlsContextOrBuilder();

  /**
   * <pre>
   * SNI string to use when creating TLS backend connections.
   * </pre>
   *
   * <code>string sni = 2 [(.validate.rules) = { ... }</code>
   */
  java.lang.String getSni();
  /**
   * <pre>
   * SNI string to use when creating TLS backend connections.
   * </pre>
   *
   * <code>string sni = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.ByteString
      getSniBytes();

  /**
   * <pre>
   * If true, server-initiated TLS renegotiation will be allowed.
   * .. attention::
   *   TLS renegotiation is considered insecure and shouldn't be used unless absolutely necessary.
   * </pre>
   *
   * <code>bool allow_renegotiation = 3;</code>
   */
  boolean getAllowRenegotiation();

  /**
   * <pre>
   * Maximum number of session keys (Pre-Shared Keys for TLSv1.3+, Session IDs and Session Tickets
   * for TLSv1.2 and older) to store for the purpose of session resumption.
   * Defaults to 1, setting this to 0 disables session resumption.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_session_keys = 4;</code>
   */
  boolean hasMaxSessionKeys();
  /**
   * <pre>
   * Maximum number of session keys (Pre-Shared Keys for TLSv1.3+, Session IDs and Session Tickets
   * for TLSv1.2 and older) to store for the purpose of session resumption.
   * Defaults to 1, setting this to 0 disables session resumption.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_session_keys = 4;</code>
   */
  com.google.protobuf.UInt32Value getMaxSessionKeys();
  /**
   * <pre>
   * Maximum number of session keys (Pre-Shared Keys for TLSv1.3+, Session IDs and Session Tickets
   * for TLSv1.2 and older) to store for the purpose of session resumption.
   * Defaults to 1, setting this to 0 disables session resumption.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_session_keys = 4;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxSessionKeysOrBuilder();
}
