// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validate/validate.proto

package io.grpc.xds.shaded.validate;

public interface FloatRulesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:validate.FloatRules)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Const specifies that this field must be exactly the specified value
   * </pre>
   *
   * <code>optional float const = 1;</code>
   */
  boolean hasConst();
  /**
   * <pre>
   * Const specifies that this field must be exactly the specified value
   * </pre>
   *
   * <code>optional float const = 1;</code>
   */
  float getConst();

  /**
   * <pre>
   * Lt specifies that this field must be less than the specified value,
   * exclusive
   * </pre>
   *
   * <code>optional float lt = 2;</code>
   */
  boolean hasLt();
  /**
   * <pre>
   * Lt specifies that this field must be less than the specified value,
   * exclusive
   * </pre>
   *
   * <code>optional float lt = 2;</code>
   */
  float getLt();

  /**
   * <pre>
   * Lte specifies that this field must be less than or equal to the
   * specified value, inclusive
   * </pre>
   *
   * <code>optional float lte = 3;</code>
   */
  boolean hasLte();
  /**
   * <pre>
   * Lte specifies that this field must be less than or equal to the
   * specified value, inclusive
   * </pre>
   *
   * <code>optional float lte = 3;</code>
   */
  float getLte();

  /**
   * <pre>
   * Gt specifies that this field must be greater than the specified value,
   * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
   * range is reversed.
   * </pre>
   *
   * <code>optional float gt = 4;</code>
   */
  boolean hasGt();
  /**
   * <pre>
   * Gt specifies that this field must be greater than the specified value,
   * exclusive. If the value of Gt is larger than a specified Lt or Lte, the
   * range is reversed.
   * </pre>
   *
   * <code>optional float gt = 4;</code>
   */
  float getGt();

  /**
   * <pre>
   * Gte specifies that this field must be greater than or equal to the
   * specified value, inclusive. If the value of Gte is larger than a
   * specified Lt or Lte, the range is reversed.
   * </pre>
   *
   * <code>optional float gte = 5;</code>
   */
  boolean hasGte();
  /**
   * <pre>
   * Gte specifies that this field must be greater than or equal to the
   * specified value, inclusive. If the value of Gte is larger than a
   * specified Lt or Lte, the range is reversed.
   * </pre>
   *
   * <code>optional float gte = 5;</code>
   */
  float getGte();

  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated float in = 6;</code>
   */
  java.util.List<java.lang.Float> getInList();
  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated float in = 6;</code>
   */
  int getInCount();
  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated float in = 6;</code>
   */
  float getIn(int index);

  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated float not_in = 7;</code>
   */
  java.util.List<java.lang.Float> getNotInList();
  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated float not_in = 7;</code>
   */
  int getNotInCount();
  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated float not_in = 7;</code>
   */
  float getNotIn(int index);
}
