// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/core/protocol.proto

package io.grpc.xds.shaded.envoy.api.v2.core;

public interface Http2ProtocolOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.api.v2.core.Http2ProtocolOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * `Maximum table size &lt;http://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
   * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
   * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
   * compression.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
   */
  boolean hasHpackTableSize();
  /**
   * <pre>
   * `Maximum table size &lt;http://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
   * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
   * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
   * compression.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
   */
  com.google.protobuf.UInt32Value getHpackTableSize();
  /**
   * <pre>
   * `Maximum table size &lt;http://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
   * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
   * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
   * compression.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getHpackTableSizeOrBuilder();

  /**
   * <pre>
   * `Maximum concurrent streams &lt;http://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
   * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
   * and defaults to 2147483647.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
   */
  boolean hasMaxConcurrentStreams();
  /**
   * <pre>
   * `Maximum concurrent streams &lt;http://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
   * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
   * and defaults to 2147483647.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32Value getMaxConcurrentStreams();
  /**
   * <pre>
   * `Maximum concurrent streams &lt;http://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
   * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
   * and defaults to 2147483647.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxConcurrentStreamsOrBuilder();

  /**
   * <pre>
   * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
   * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
   * stop the flow of data to the codec buffers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
   */
  boolean hasInitialStreamWindowSize();
  /**
   * <pre>
   * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
   * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
   * stop the flow of data to the codec buffers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32Value getInitialStreamWindowSize();
  /**
   * <pre>
   * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
   * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
   * stop the flow of data to the codec buffers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getInitialStreamWindowSizeOrBuilder();

  /**
   * <pre>
   * Similar to *initial_stream_window_size*, but for connection-level flow-control
   * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
   */
  boolean hasInitialConnectionWindowSize();
  /**
   * <pre>
   * Similar to *initial_stream_window_size*, but for connection-level flow-control
   * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32Value getInitialConnectionWindowSize();
  /**
   * <pre>
   * Similar to *initial_stream_window_size*, but for connection-level flow-control
   * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getInitialConnectionWindowSizeOrBuilder();

  /**
   * <pre>
   * Allows proxying Websocket and other upgrades over H2 connect.
   * </pre>
   *
   * <code>bool allow_connect = 5;</code>
   */
  boolean getAllowConnect();

  /**
   * <pre>
   * [#not-implemented-hide:] Hiding until envoy has full metadata support.
   * Still under implementation. DO NOT USE.
   * Allows metadata. See [metadata
   * docs](https://github.com/envoyproxy/envoy/blob/master/source/docs/h2_metadata.md) for more
   * information.
   * </pre>
   *
   * <code>bool allow_metadata = 6;</code>
   */
  boolean getAllowMetadata();
}
