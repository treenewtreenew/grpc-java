// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/core/health_check.proto

package io.grpc.xds.shaded.envoy.api.v2.core;

public interface HealthCheckOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.api.v2.core.HealthCheck)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The time to wait for a health check response. If the timeout is reached the
   * health check attempt will be considered a failure.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 1 [(.validate.rules) = { ... }</code>
   */
  boolean hasTimeout();
  /**
   * <pre>
   * The time to wait for a health check response. If the timeout is reached the
   * health check attempt will be considered a failure.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.Duration getTimeout();
  /**
   * <pre>
   * The time to wait for a health check response. If the timeout is reached the
   * health check attempt will be considered a failure.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder();

  /**
   * <pre>
   * The interval between health checks.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 2 [(.validate.rules) = { ... }</code>
   */
  boolean hasInterval();
  /**
   * <pre>
   * The interval between health checks.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.Duration getInterval();
  /**
   * <pre>
   * The interval between health checks.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getIntervalOrBuilder();

  /**
   * <pre>
   * An optional jitter amount in millseconds. If specified, during every
   * interval Envoy will add interval_jitter to the wait time.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval_jitter = 3;</code>
   */
  boolean hasIntervalJitter();
  /**
   * <pre>
   * An optional jitter amount in millseconds. If specified, during every
   * interval Envoy will add interval_jitter to the wait time.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval_jitter = 3;</code>
   */
  com.google.protobuf.Duration getIntervalJitter();
  /**
   * <pre>
   * An optional jitter amount in millseconds. If specified, during every
   * interval Envoy will add interval_jitter to the wait time.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval_jitter = 3;</code>
   */
  com.google.protobuf.DurationOrBuilder getIntervalJitterOrBuilder();

  /**
   * <pre>
   * An optional jitter amount as a percentage of interval_ms. If specified,
   * during every interval Envoy will add interval_ms *
   * interval_jitter_percent / 100 to the wait time.
   * If interval_jitter_ms and interval_jitter_percent are both set, both of
   * them will be used to increase the wait time.
   * </pre>
   *
   * <code>uint32 interval_jitter_percent = 18;</code>
   */
  int getIntervalJitterPercent();

  /**
   * <pre>
   * The number of unhealthy health checks required before a host is marked
   * unhealthy. Note that for *http* health checking if a host responds with 503
   * this threshold is ignored and the host is considered unhealthy immediately.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value unhealthy_threshold = 4;</code>
   */
  boolean hasUnhealthyThreshold();
  /**
   * <pre>
   * The number of unhealthy health checks required before a host is marked
   * unhealthy. Note that for *http* health checking if a host responds with 503
   * this threshold is ignored and the host is considered unhealthy immediately.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value unhealthy_threshold = 4;</code>
   */
  com.google.protobuf.UInt32Value getUnhealthyThreshold();
  /**
   * <pre>
   * The number of unhealthy health checks required before a host is marked
   * unhealthy. Note that for *http* health checking if a host responds with 503
   * this threshold is ignored and the host is considered unhealthy immediately.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value unhealthy_threshold = 4;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getUnhealthyThresholdOrBuilder();

  /**
   * <pre>
   * The number of healthy health checks required before a host is marked
   * healthy. Note that during startup, only a single successful health check is
   * required to mark a host healthy.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value healthy_threshold = 5;</code>
   */
  boolean hasHealthyThreshold();
  /**
   * <pre>
   * The number of healthy health checks required before a host is marked
   * healthy. Note that during startup, only a single successful health check is
   * required to mark a host healthy.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value healthy_threshold = 5;</code>
   */
  com.google.protobuf.UInt32Value getHealthyThreshold();
  /**
   * <pre>
   * The number of healthy health checks required before a host is marked
   * healthy. Note that during startup, only a single successful health check is
   * required to mark a host healthy.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value healthy_threshold = 5;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getHealthyThresholdOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:] Non-serving port for health checking.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value alt_port = 6;</code>
   */
  boolean hasAltPort();
  /**
   * <pre>
   * [#not-implemented-hide:] Non-serving port for health checking.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value alt_port = 6;</code>
   */
  com.google.protobuf.UInt32Value getAltPort();
  /**
   * <pre>
   * [#not-implemented-hide:] Non-serving port for health checking.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value alt_port = 6;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getAltPortOrBuilder();

  /**
   * <pre>
   * Reuse health check connection between health checks. Default is true.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue reuse_connection = 7;</code>
   */
  boolean hasReuseConnection();
  /**
   * <pre>
   * Reuse health check connection between health checks. Default is true.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue reuse_connection = 7;</code>
   */
  com.google.protobuf.BoolValue getReuseConnection();
  /**
   * <pre>
   * Reuse health check connection between health checks. Default is true.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue reuse_connection = 7;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getReuseConnectionOrBuilder();

  /**
   * <pre>
   * HTTP health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.HttpHealthCheck http_health_check = 8;</code>
   */
  boolean hasHttpHealthCheck();
  /**
   * <pre>
   * HTTP health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.HttpHealthCheck http_health_check = 8;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.core.HealthCheck.HttpHealthCheck getHttpHealthCheck();
  /**
   * <pre>
   * HTTP health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.HttpHealthCheck http_health_check = 8;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.core.HealthCheck.HttpHealthCheckOrBuilder getHttpHealthCheckOrBuilder();

  /**
   * <pre>
   * TCP health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.TcpHealthCheck tcp_health_check = 9;</code>
   */
  boolean hasTcpHealthCheck();
  /**
   * <pre>
   * TCP health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.TcpHealthCheck tcp_health_check = 9;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.core.HealthCheck.TcpHealthCheck getTcpHealthCheck();
  /**
   * <pre>
   * TCP health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.TcpHealthCheck tcp_health_check = 9;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.core.HealthCheck.TcpHealthCheckOrBuilder getTcpHealthCheckOrBuilder();

  /**
   * <pre>
   * gRPC health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.GrpcHealthCheck grpc_health_check = 11;</code>
   */
  boolean hasGrpcHealthCheck();
  /**
   * <pre>
   * gRPC health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.GrpcHealthCheck grpc_health_check = 11;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.core.HealthCheck.GrpcHealthCheck getGrpcHealthCheck();
  /**
   * <pre>
   * gRPC health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.GrpcHealthCheck grpc_health_check = 11;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.core.HealthCheck.GrpcHealthCheckOrBuilder getGrpcHealthCheckOrBuilder();

  /**
   * <pre>
   * Custom health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.CustomHealthCheck custom_health_check = 13;</code>
   */
  boolean hasCustomHealthCheck();
  /**
   * <pre>
   * Custom health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.CustomHealthCheck custom_health_check = 13;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.core.HealthCheck.CustomHealthCheck getCustomHealthCheck();
  /**
   * <pre>
   * Custom health check.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HealthCheck.CustomHealthCheck custom_health_check = 13;</code>
   */
  io.grpc.xds.shaded.envoy.api.v2.core.HealthCheck.CustomHealthCheckOrBuilder getCustomHealthCheckOrBuilder();

  /**
   * <pre>
   * The "no traffic interval" is a special health check interval that is used when a cluster has
   * never had traffic routed to it. This lower interval allows cluster information to be kept up to
   * date, without sending a potentially large amount of active health checking traffic for no
   * reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
   * standard health check interval that is defined. Note that this interval takes precedence over
   * any other.
   * The default value for "no traffic interval" is 60 seconds.
   * </pre>
   *
   * <code>.google.protobuf.Duration no_traffic_interval = 12 [(.validate.rules) = { ... }</code>
   */
  boolean hasNoTrafficInterval();
  /**
   * <pre>
   * The "no traffic interval" is a special health check interval that is used when a cluster has
   * never had traffic routed to it. This lower interval allows cluster information to be kept up to
   * date, without sending a potentially large amount of active health checking traffic for no
   * reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
   * standard health check interval that is defined. Note that this interval takes precedence over
   * any other.
   * The default value for "no traffic interval" is 60 seconds.
   * </pre>
   *
   * <code>.google.protobuf.Duration no_traffic_interval = 12 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.Duration getNoTrafficInterval();
  /**
   * <pre>
   * The "no traffic interval" is a special health check interval that is used when a cluster has
   * never had traffic routed to it. This lower interval allows cluster information to be kept up to
   * date, without sending a potentially large amount of active health checking traffic for no
   * reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
   * standard health check interval that is defined. Note that this interval takes precedence over
   * any other.
   * The default value for "no traffic interval" is 60 seconds.
   * </pre>
   *
   * <code>.google.protobuf.Duration no_traffic_interval = 12 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getNoTrafficIntervalOrBuilder();

  /**
   * <pre>
   * The "unhealthy interval" is a health check interval that is used for hosts that are marked as
   * unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
   * standard health check interval that is defined.
   * The default value for "unhealthy interval" is the same as "interval".
   * </pre>
   *
   * <code>.google.protobuf.Duration unhealthy_interval = 14 [(.validate.rules) = { ... }</code>
   */
  boolean hasUnhealthyInterval();
  /**
   * <pre>
   * The "unhealthy interval" is a health check interval that is used for hosts that are marked as
   * unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
   * standard health check interval that is defined.
   * The default value for "unhealthy interval" is the same as "interval".
   * </pre>
   *
   * <code>.google.protobuf.Duration unhealthy_interval = 14 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.Duration getUnhealthyInterval();
  /**
   * <pre>
   * The "unhealthy interval" is a health check interval that is used for hosts that are marked as
   * unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
   * standard health check interval that is defined.
   * The default value for "unhealthy interval" is the same as "interval".
   * </pre>
   *
   * <code>.google.protobuf.Duration unhealthy_interval = 14 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getUnhealthyIntervalOrBuilder();

  /**
   * <pre>
   * The "unhealthy edge interval" is a special health check interval that is used for the first
   * health check right after a host is marked as unhealthy. For subsequent health checks
   * Envoy will shift back to using either "unhealthy interval" if present or the standard health
   * check interval that is defined.
   * The default value for "unhealthy edge interval" is the same as "unhealthy interval".
   * </pre>
   *
   * <code>.google.protobuf.Duration unhealthy_edge_interval = 15 [(.validate.rules) = { ... }</code>
   */
  boolean hasUnhealthyEdgeInterval();
  /**
   * <pre>
   * The "unhealthy edge interval" is a special health check interval that is used for the first
   * health check right after a host is marked as unhealthy. For subsequent health checks
   * Envoy will shift back to using either "unhealthy interval" if present or the standard health
   * check interval that is defined.
   * The default value for "unhealthy edge interval" is the same as "unhealthy interval".
   * </pre>
   *
   * <code>.google.protobuf.Duration unhealthy_edge_interval = 15 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.Duration getUnhealthyEdgeInterval();
  /**
   * <pre>
   * The "unhealthy edge interval" is a special health check interval that is used for the first
   * health check right after a host is marked as unhealthy. For subsequent health checks
   * Envoy will shift back to using either "unhealthy interval" if present or the standard health
   * check interval that is defined.
   * The default value for "unhealthy edge interval" is the same as "unhealthy interval".
   * </pre>
   *
   * <code>.google.protobuf.Duration unhealthy_edge_interval = 15 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getUnhealthyEdgeIntervalOrBuilder();

  /**
   * <pre>
   * The "healthy edge interval" is a special health check interval that is used for the first
   * health check right after a host is marked as healthy. For subsequent health checks
   * Envoy will shift back to using the standard health check interval that is defined.
   * The default value for "healthy edge interval" is the same as the default interval.
   * </pre>
   *
   * <code>.google.protobuf.Duration healthy_edge_interval = 16 [(.validate.rules) = { ... }</code>
   */
  boolean hasHealthyEdgeInterval();
  /**
   * <pre>
   * The "healthy edge interval" is a special health check interval that is used for the first
   * health check right after a host is marked as healthy. For subsequent health checks
   * Envoy will shift back to using the standard health check interval that is defined.
   * The default value for "healthy edge interval" is the same as the default interval.
   * </pre>
   *
   * <code>.google.protobuf.Duration healthy_edge_interval = 16 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.Duration getHealthyEdgeInterval();
  /**
   * <pre>
   * The "healthy edge interval" is a special health check interval that is used for the first
   * health check right after a host is marked as healthy. For subsequent health checks
   * Envoy will shift back to using the standard health check interval that is defined.
   * The default value for "healthy edge interval" is the same as the default interval.
   * </pre>
   *
   * <code>.google.protobuf.Duration healthy_edge_interval = 16 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getHealthyEdgeIntervalOrBuilder();

  /**
   * <pre>
   * Specifies the path to the :ref:`health check event log &lt;arch_overview_health_check_logging&gt;`.
   * If empty, no event log will be written.
   * </pre>
   *
   * <code>string event_log_path = 17;</code>
   */
  java.lang.String getEventLogPath();
  /**
   * <pre>
   * Specifies the path to the :ref:`health check event log &lt;arch_overview_health_check_logging&gt;`.
   * If empty, no event log will be written.
   * </pre>
   *
   * <code>string event_log_path = 17;</code>
   */
  com.google.protobuf.ByteString
      getEventLogPathBytes();

  /**
   * <pre>
   * If set to true, health check failure events will always be logged. If set to false, only the
   * initial health check failure event will be logged.
   * The default value is false.
   * </pre>
   *
   * <code>bool always_log_health_check_failures = 19;</code>
   */
  boolean getAlwaysLogHealthCheckFailures();

  public io.grpc.xds.shaded.envoy.api.v2.core.HealthCheck.HealthCheckerCase getHealthCheckerCase();
}
